#!/bin/bash
# Example: run.sh eforie 2021-09-20 10 
# Example: run.sh eforie 2021-09-20 10 
# Example: run_py.sh galway 2021-11-01 5 [-8.927046,53.142875,-1.0] [[-9.0175,53.16816958],[-9.041166667,53.16817019],[-9.042,53.18817033],[-9.018833333,53.18816981]]

doPreProcessing=true
doProcessing=true
doPostProcessing=true
doBulletin=true

conda activate forcoastA2

INITIAL_DIR="$(pwd)"
cd /usr/src/app

# Clean data folder
#DATA_DIR=/usr/src/app/data/
DATA_DIR=/home/arthur/Desktop/DOCS/PROJECTS/FORECOAST/Pilot/SM/ForCoast-SM-A3/testdata/
mkdir -p ${DATA_DIR}

# Substitute values in source ($4) and target ($5) files
if [[ $# -eq  5 ]]
  then
    echo 'Substitute values in sources.txt and targets.txt'
    > ./usr/$1/config/sources.txt
    echo $4 >> ./usr/$1/config/sources.txt
    > ./usr/$1/config/targets.txt
    echo $5 >> ./usr/$1/config/targets.txt
fi

## Download data (using data dir from yml)
cd ./PreProcessing
echo "python forcoast_download_yml.py -a $1 -T $2 -p $3 -d ${DATA_DIR}"
if $doPreProcessing ; then
    python forcoast_download_yml.py -a $1 -T $2 -p $3 -d ${DATA_DIR}
else
    echo "-->Skipped"
fi

echo ''
echo '###########'
echo "Download done."
echo '###########'

## Run model
## This is done once per source
cd ../Processing
echo '###########'
echo "Starting Processing, according to ../usr/$1/config/sources.txt"
echo '###########'
sourcecount=0
while read -r s; do
    echo "python forcoast.py -y $1 -T $2 -p $3 -s $s -d ${DATA_DIR} "
    if $doProcessing; then
	python forcoast.py -y $1 -T $2 -p $3 -s $s -d ${DATA_DIR}
	if [ -e ../usr/$1/output/test.nc ]; then
	    mv ../usr/$1/output/test.nc ../usr/$1/output/test_${sourcecount}.nc
	else
	    echo "CRITICAL ERROR: PARCELS DID NOT GENERATE THE EXPECTED OUTPUT FILE"; exit
	fi
    else
	echo "-->Skipped"
    fi
    sourcecount=`expr $sourcecount + 1`
done < "../usr/$1/config/sources.txt"
echo '###########'
echo "Processing Done"
echo '###########'

## Run postprocessing
cd ../PostProcessing
echo '###########'
echo "Starting Post-Processing, according to ../usr/$1/config/sources.txt and ../usr/$1/config/targets.txt"
echo '###########'
targetcount=0
while read -r t; do # Loop on targets
    sourcecount=0
    while read -r s; do # Loop on Sources
	echo "python SM-A2-Postprocess.py -y $1 -s $s -sc $sourcecount -t $t -tc $targetcount -d ${DATA_DIR}"
	if $doPostProcessing; then
	    python SM-A2-Postprocess.py -y $1 -s $s -c $sourcecount -t $t -k $targetcount -d ${DATA_DIR}
	    # Generate Animation
	    convert -delay 50 -fuzz 2% -layers Optimize -loop 0 ../usr/$1/output/target_${targetcount}_source_${sourcecount}/AllTracks_Alarm*.png ../usr/$1/output/target_${targetcount}_source_${sourcecount}/AllTracks.gif
	else
            echo "-->Skipped"
	fi
	sourcecount=`expr $sourcecount + 1`    
    done < "../usr/$1/config/sources.txt"
    targetcount=`expr $targetcount + 1`
done < "../usr/$1/config/targets.txt"
echo '###########'
echo "Post - Processing Done"
echo '###########'


# Run bulletin spcript 
cd ../BulletinScript
echo '###########'
echo "Starting Bulletin Generation, according to ../usr/$1/config/sources.txt and ../usr/$1/config/targets.txt"
echo '###########'
targetcount=0
while read -r t; do
    sourcecount=0
    while read -r s; do
    	echo "python bulletin_script.py -y $1 -T $2 -s $s -sc $sourcecount -t $t -tc $targetcount -d ${DATA_DIR}"
    	if $doBulleting ; then
	        python bulletin_script.py -y $1 -T $2 -s $s -c $sourcecount -t $t -k $targetcount -d ${DATA_DIR}
            # Generate Animation
    	    convert -delay 50 -fuzz 2% -layers Optimize -loop 0 ../usr/$1/output/target_${targetcount}_source_${sourcecount}/bulletin*.png ../usr/$1/output/target_${targetcount}_source_${sourcecount}/bulletin.gif
	    else
	        echo "-->Skipped"
        fi
        cp ../usr/$1/output/target_${targetcount}_source_${sourcecount}/bulletin.png ../usr/$1/output/bulletin_target_${targetcount}_source_${sourcecount}.png
        cp ../usr/$1/output/target_${targetcount}_source_${sourcecount}/bulletin.gif ../usr/$1/output/bulletin_target_${targetcount}_source_${sourcecount}.gif
        sourcecount=`expr $sourcecount + 1`
    done < "../usr/$1/config/sources.txt"
    targetcount=`expr $targetcount + 1`
done < "../usr/$1/config/targets.txt"
echo '###########'
echo "Bulletin Done"
echo '###########'

# Remains TODO a multi-source bulletin per target.
## Can be done by collecting on the TS_Risk.png from each usr/${1}/output/source_X_target_Y/ directories

echo $INITIAL_DIR
cd ..
ls

cp /usr/src/app/usr/$1/output/bulletin*png $INITIAL_DIR
cp /usr/src/app/usr/$1/output/bulletin*png ${DATA_DIR}
